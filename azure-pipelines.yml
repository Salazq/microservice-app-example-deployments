trigger:
  branches:
    include:
      - main
  
  paths:
    include:
      - terraform/*
      - ansible-deploy/*

pool:
  vmImage: ubuntu-latest

stages:
- stage: Terraform_plan
  jobs:
    - job: Plan
      continueOnError: false
      steps:
        # Paso 1: Instalar Terraform
        - task: TerraformInstaller@0
          inputs:
            terraformVersion: '1.5.7'
          displayName: 'Install Terraform'

        # Paso 2: Verificar versión
        - script: terraform --version
          displayName: 'Check Terraform version'

        # Paso 3: Crear directorio si no existe
        - script: |
            mkdir -p $(System.DefaultWorkingDirectory)/terraform
            cd $(System.DefaultWorkingDirectory)/terraform
            touch plan.out  # Crear archivo vacío si no existe
          displayName: 'Create terraform directory'

        # Paso 4: Terraform init
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendServiceArm: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
            backendAzureRmResourceGroupName: 'VM'
            backendAzureRmStorageAccountName: 'vmrecursos'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'pipelines.tfstate'
          displayName: 'Terraform init'

        # Paso 5: Terraform plan (guardando output)
        - script: |
            cd $(System.DefaultWorkingDirectory)/terraform
            terraform plan -out=plan.out
            # Asegurar que el archivo existe
            if [ ! -f plan.out ]; then
              echo "##vso[task.logissue type=warning]plan.out not created, creating empty file"
              touch plan.out
            fi
          displayName: 'Terraform Plan with output'

        # Paso 6: Publicar artefacto
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform/plan.out'
            artifact: 'Plan'
            publishLocation: 'pipeline'
          displayName: 'Publish Plan Artifact'

- stage: Terraform_apply 
  jobs:
  - job: Deploy
    continueOnError: false
    steps:
   
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '1.5.7'
        displayName: 'Install Terraform'

    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
        backendAzureRmResourceGroupName: 'VM'
        backendAzureRmStorageAccountName: 'recursos'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'pipelines.tfstate'
      displayName: 'Terraform init'
      
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Plan'
        downloadPath: '$(System.DefaultWorkingDirectory)/terraform'
      displayName: 'Download Plan Artifact'
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'ls -a'
      displayName: 'Check plan file'

    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '"plan.out"'
        environmentServiceNameAzureRM: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'

    - script: |
        cd $(System.DefaultWorkingDirectory)/terraform
        PUBLIC_IP=$(terraform output -raw public_ip_address)
        echo "Public IP: $PUBLIC_IP"
        echo "##vso[task.setvariable variable=PUBLIC_IP;isOutput=true]$PUBLIC_IP"
      displayName: 'Capture Public IP'
      name: CaptureIP

- stage: Save_IP
  dependsOn: Terraform_apply
  variables:
    PUBLIC_IP: $[stageDependencies.Terraform_apply.Deploy.outputs['CaptureIP.PUBLIC_IP']]
  condition: succeeded()
  jobs:
  - job: Update_Variables
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az pipelines variable-group update \
            --group-id 1 \
            --organization "https://dev.azure.com/salazq" \
            --project "microservice-app-example" \
            --name "variable-group-taller" \
            --variables VM_IP=$(PUBLIC_IP)
          
          echo "Variable Group actualizado correctamente"
      displayName: 'Actualizar Variable Group con IP pública'

- stage: Ansible_Deploy
  condition: false
  dependsOn: Terraform_apply
  variables:
    PUBLIC_IP: $[stageDependencies.Terraform_apply.Deploy.outputs['CaptureIP.PUBLIC_IP']]
  jobs:
  - job: Configure
    steps:
    # 1. Configurar Python 3.12 (igual que local)
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.12.x'
        addToPath: true
      displayName: 'Configurar Python 3.12'

    # 2. Instalar versiones específicas de Ansible
    - script: |
        python -m pip install --upgrade pip
        pip install ansible-core==2.16.3 cryptography==42.0.5
        ansible --version
      displayName: 'Instalar Ansible 2.16.3'

    # 3. Configurar ansible.cfg
    - script: |
        mkdir -p $(System.DefaultWorkingDirectory)/ansible-deploy
        echo "[defaults]" > $(System.DefaultWorkingDirectory)/ansible-deploy/ansible.cfg
        echo "host_key_checking = False" >> $(System.DefaultWorkingDirectory)/ansible-deploy/ansible.cfg
        echo "roles_path = ./roles" >> $(System.DefaultWorkingDirectory)/ansible-deploy/ansible.cfg
      displayName: 'Configurar ansible.cfg'

    # 4. Generar inventory/hosts.ini
    - script: |
        echo "Generando archivo de inventario..."
        mkdir -p $(System.DefaultWorkingDirectory)/ansible-deploy/inventory
        cat <<EOF > $(System.DefaultWorkingDirectory)/ansible-deploy/inventory/hosts.ini
        [azure_vm]
        $(PUBLIC_IP) ansible_user=azureuser ansible_ssh_pass=SuperSecret123! ansible_python_interpreter=/usr/bin/python3
        EOF
        
        echo "Inventario generado (credenciales ocultas):"
        cat $(System.DefaultWorkingDirectory)/ansible-deploy/inventory/hosts.ini | sed 's/ansible_ssh_pass=.*/ansible_ssh_pass=*******/'
      displayName: 'Generar inventory/hosts.ini'

    # 5. Ejecutar playbook con verbosidad
    - script: |
        cd $(System.DefaultWorkingDirectory)/ansible-deploy
        ANSIBLE_CONFIG=$(System.DefaultWorkingDirectory)/ansible-deploy/ansible.cfg \
        ansible-playbook -i inventory/hosts.ini playbooks/install_docker.yml -vvv
      displayName: 'Ejecutar playbook Ansible (verbose)'